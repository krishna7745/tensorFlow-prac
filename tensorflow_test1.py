# -*- coding: utf-8 -*-
"""tensorFlow test1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l545prQKhn_uP-Pml_-hU9vtWim57CJ7
"""

from keras.datasets import imdb
import numpy as np
from keras import models,layers
import matplotlib.pyplot as plt

(train_data,train_labels),(test_data,test_labels) =imdb.load_data(num_words=10000)
word_index =imdb.get_word_index()

reverse_word_index =dict([(value,key) for (key,value) in word_index.items()])
decoded_review =" ".join([reverse_word_index.get(i-3,'?') for i in train_data[0]])

def vectorize_sequence(sequences, dimension=10000):
  results =np.zeros((len(sequences),dimension))
  for i , sequence in enumerate(sequences):
    results[i,sequence]=1.
    return results
x_train =vectorize_sequence(train_data)
x_test =vectorize_sequence(test_data)
#print(train_data[0])
#print(x_train[0])
y_train =np.asarray(train_labels).astype('float32')
y_test =np.asarray(test_labels).astype('float32')

model = models.Sequential()
model.add(layers.Dense(16, activation='relu',input_shape=(10000,)))
model.add(layers.Dense(16, activation='relu'))
model.add(layers.Dense(16, activation='relu'))
model.add(layers.Dense(16, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))
model.compile(optimizer='rmsprop',loss='binary_crossentropy',metrics=['acc'])

x_val =x_train[:10000]
partial_x_train =x_train[10000:]
#print(x_val)
#print(partial_x_train)
y_val = y_train[:10000]
partial_y_train = y_train[10000:]

history = model.fit(partial_x_train,partial_y_train,epochs=10,batch_size=512,validation_data=(x_val,y_val))

history_dict =history.history
history_dict.keys()

loss_values =history_dict['loss']
val_loss_values = history_dict['val_loss']
epochs =range(1, len(history_dict["acc"])+1)
plt.plot(epochs,loss_values,'bo',label='Training loss')
plt.plot(epochs,val_loss_values,'b',label= 'Validation loss')
plt.title('Training and Validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()